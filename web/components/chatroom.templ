package components

import "time"

type MessageComponentViewModel struct {
	Sender string
	Body   string
	Time   string
	IsSelf bool
}
type relevancy int

const (
	today relevancy = iota
	thisWeek
	thisMonth
	thisYear
	allTime
)
const (
	HoursInDay        = 24
	DaysInWeek        = 7
	timeDurationToday = time.Duration(time.Hour * HoursInDay)
	timeDurationWeek  = time.Duration(time.Hour * HoursInDay * DaysInWeek)
)

func calcTimeRelevancy(t time.Time) relevancy {
	now := time.Now()
	timeDiff := now.Sub(t)

	switch {
	case now.Year() == t.Year() && now.Month() == t.Month() && now.Day() == t.Day():
		return today
	case now.Year() == t.Year() && now.Month() == t.Month() && timeDiff < timeDurationWeek:
		return thisWeek
	case now.Year() == t.Year() && now.Month() == t.Month():
		return thisMonth
	case now.Year() == t.Year():
		return thisYear
	default:
		return allTime
	}
}

func formatTime(t time.Time, r relevancy) string {
	switch r {
	case today:
		return t.Format("3:04:05 PM")
	case thisWeek:
		return t.Format("Mon 3:04 PM")
	case thisMonth:
		return t.Format("2 Jan 3:04 PM")
	case thisYear:
		return t.Format("2 Jan 3:04 PM")
	default:
		return t.Format("2 Jan 2006")
	}
}

func NewMessageView(sender string, body string, time time.Time, isSelf bool) *MessageComponentViewModel {
	relevancy := calcTimeRelevancy(time)
	timeString := formatTime(time, relevancy)

	message := &MessageComponentViewModel{
		Sender: sender,
		Body:   body,
		Time:   timeString,
		IsSelf: isSelf,
	}
	return message
}

templ ChatInput() {
	<form id="chat-form" ws-send hx-trigger="submit, send-message" hx-on::ws-after-send="resetTextarea('#text-message')">
		<label for="text-message" class="sr-only">Your message</label>
		<div class="flex items-center px-3 py-2 bg-base-300 shadow">
			<textarea
				form="chat-form"
				id="text-message"
				rows="1"
				placeholder="Type your message..."
				class="no-scrollbar resize-none block mx-4 p-2.5 w-full textarea textarea-bordered"
				name="Content"
				maxlength="5000"
				onInput="autoHeight(this)"
				hx-on:keypress="sendMessageOnEnter(event)"
			></textarea>
			<button type="submit" class="btn btn-primary">
				<svg
					class="w-5 h-5 rotate-90 rtl:-rotate-90"
					aria-hidden="true"
					xmlns="http://www.w3.org/2000/svg"
					fill="currentColor"
					viewBox="0 0 18 20"
				>
					<path
						d="m17.914 18.594-8-18a1 1 0 0 0-1.828 0l-8 18a1 1 0 0 0 1.157 1.376L8 18.281V9a1 1 0 0 1 2 0v9.281l6.758 1.689a1 1 0 0 0 1.156-1.376Z"
					></path>
				</svg>
				<span class="sr-only">Send message</span>
			</button>
		</div>
	</form>
	<script>
	const autoHeight = (elem) => {
		elem.style.height = '1px';
		elem.style.height = `${elem.scrollHeight}px`;
	}
	// Event handler, emits "send-message" if enter is pressed with no modifier key
	const sendMessageOnEnter = (event) => {
		if (event.key === "Enter" && !(event.shiftKey || event.altKey || event.ctrlKey || event.metaKey)) {
			event.preventDefault();
			htmx.trigger(event.target, "send-message");
		}
	};
	const resetTextarea = (selectors) => {
		const element = document.querySelector(selectors)
		if (element != null) {
			element.value = "";
			autoHeight(element)
		}
	};
</script>
}

templ messageTemplate(message *MessageComponentViewModel) {
	<div class={ "chat" , templ.KV("chat-start", !message.IsSelf), templ.KV("chat-end", message.IsSelf) }>
		<div class="chat-header">
			{ message.Sender }
			<time class="text-xs opacity-50">{ message.Time }</time>
		</div>
		<div class="chat-bubble">{ message.Body }</div>
	</div>
}

templ Message(message *MessageComponentViewModel) {
	<div hx-swap-oob="beforebegin:#chatroom-bottom">
		@messageTemplate(message)
	</div>
}

templ Chatroom(messages []*MessageComponentViewModel) {
	<div class="flex flex-col h-full w-3/5 m-auto bg-base-100 shadow-2xl" hx-ext="ws" ws-connect="/chatroom/ws">
		<h1 class="text-center">Chat Room</h1>
		<div class="flex-1 overflow-hidden">
			<div class="h-full relative">
				<div class="h-full w-full overflow-y-auto">
					<scroller class="scroller flex flex-col pb-8">
						for _, message :=range messages {
							@messageTemplate(message)
						}
						//Injected content here
						<anchor id="chatroom-bottom" class="anchor"></anchor>
					</scroller>
				</div>
			</div>
		</div>
		<div class="w-full">
			@ChatInput()
		</div>
	</div>
	<script>
	const anchor = document.getElementById("chatroom-bottom");
	anchor.scrollIntoView();
</script>
}
