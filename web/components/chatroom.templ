package components

import (
	"time"
	"strconv"
)

type MessageComponentViewModel struct {
	Number int64
	Sender string
	Body   string
	Time   string
	IsSelf bool
}
type relevancy int

const (
	today relevancy = iota
	thisWeek
	thisMonth
	thisYear
	allTime
)
const (
	HoursInDay        = 24
	DaysInWeek        = 7
	timeDurationToday = time.Duration(time.Hour * HoursInDay)
	timeDurationWeek  = time.Duration(time.Hour * HoursInDay * DaysInWeek)
)

func calcTimeRelevancy(t time.Time) relevancy {
	now := time.Now()
	timeDiff := now.Sub(t)

	switch {
	case now.Year() == t.Year() && now.Month() == t.Month() && now.Day() == t.Day():
		return today
	case now.Year() == t.Year() && now.Month() == t.Month() && timeDiff < timeDurationWeek:
		return thisWeek
	case now.Year() == t.Year() && now.Month() == t.Month():
		return thisMonth
	case now.Year() == t.Year():
		return thisYear
	default:
		return allTime
	}
}

func formatTime(t time.Time, r relevancy) string {
	switch r {
	case today:
		return t.Format("3:04:05 PM")
	case thisWeek:
		return t.Format("Mon 3:04 PM")
	case thisMonth:
		return t.Format("2 Jan 3:04 PM")
	case thisYear:
		return t.Format("2 Jan 3:04 PM")
	default:
		return t.Format("2 Jan 2006")
	}
}

func NewMessageView(number int64, sender string, body string, time time.Time, isSelf bool) *MessageComponentViewModel {
	relevancy := calcTimeRelevancy(time)
	timeString := formatTime(time, relevancy)

	message := &MessageComponentViewModel{
		Number: number,
		Sender: sender,
		Body:   body,
		Time:   timeString,
		IsSelf: isSelf,
	}
	return message
}

templ TypingNotification(clientId string, name string) {
	<div id={ clientId } class="prose text-sm whitespace-nowrap">
		{ name }
		<span class="prose prose-slate text-xs">is typing</span>
		<span class="loading loading-dots loading-xs align-bottom"></span>
	</div>
}

templ ChatInput() {
	<div
		hx-ext="debug"
	>
		<div id="chat-notifications" class="flex flex-row justify-start gap-4 px-2 overflow-hidden"></div>
		<form
			id="chat-form"
			ws-send
			hx-trigger="submit, send-message"
			hx-on::ws-after-send="resetTextarea('#text-message')"
			hx-vals='js:{
				"type": "message",
				"body": "#text-message"
				}'
		>
			<label for="text-message" class="sr-only">Your message</label>
			<div class="flex items-center px-3 py-2 bg-base-300 shadow">
				<textarea
					form="chat-form"
					id="text-message"
					rows="1"
					placeholder="Type your message..."
					class="no-scrollbar resize-none block mx-4 p-2.5 w-full textarea textarea-bordered"
					name="content"
					maxlength="5000"
					onInput="autoHeight(this)"
					hx-on:keypress="sendMessageOnEnter(event)"
				></textarea>
				<button type="submit" class="btn btn-primary">
					<svg
						class="w-5 h-5 rotate-90 rtl:-rotate-90"
						aria-hidden="true"
						xmlns="http://www.w3.org/2000/svg"
						fill="currentColor"
						viewBox="0 0 18 20"
					>
						<path
							d="m17.914 18.594-8-18a1 1 0 0 0-1.828 0l-8 18a1 1 0 0 0 1.157 1.376L8 18.281V9a1 1 0 0 1 2 0v9.281l6.758 1.689a1 1 0 0 0 1.156-1.376Z"
						></path>
					</svg>
					<span class="sr-only">Send message</span>
				</button>
			</div>
		</form>
	</div>
	<script type="text/javascript">
		const autoHeight = (elem) => {
			elem.style.height = '1px';
			elem.style.height = `${elem.scrollHeight}px`;
		}
		// Event handler, emits "send-message" if enter is pressed with no modifier key
		const sendMessageOnEnter = (event) => {
			if (event.key === "Enter" && !(event.shiftKey || event.altKey || event.ctrlKey || event.metaKey)) {
				event.preventDefault();
				htmx.trigger(event.target, "send-message");
			}
		};
		const resetTextarea = (selectors) => {
			const element = document.querySelector(selectors)
			if (element != null) {
				element.value = "";
				autoHeight(element)
			}
		};

		(function(){
				//   htmx.defineExtension("ws-json-encode", {
				// onEvent: function(name, evt) {
				// 	console.log("Fired event: " + name, evt);
				//     },
				// encodeParameters: function(...args) {
				// 	console.log(args)
				// 	console.log("encodeParameters")
				// 	return null;
				// }
				//   })
    })()
	</script>
}

templ messageTemplate(message *MessageComponentViewModel) {
	<div
		data-number={ strconv.FormatInt(message.Number, 10) }
		class={ "chat" , templ.KV("chat-start", !message.IsSelf), templ.KV("chat-end", message.IsSelf) }
	>
		<div class="chat-header">
			{ message.Sender }
			<time class="text-xs opacity-50">{ message.Time }</time>
		</div>
		<div class="chat-bubble">{ message.Body }</div>
	</div>
}

templ Message(message *MessageComponentViewModel) {
	<div hx-swap-oob="beforebegin:#chat_room_bottom">
		@messageTemplate(message)
	</div>
}

templ lazyLoadMessages(message *MessageComponentViewModel) {
	<div hx-get={ "/chatroom/messages/10?ref=" + strconv.FormatInt(message.Number, 10) } hx-trigger="intersect once" hx-swap="afterbegin" hx-target="#chat_room"></div>
}

templ MessageGroup(messages []*MessageComponentViewModel) {
	for _, message := range messages {
		@messageTemplate(message)
	}
	if len(messages) > 0 {
		@lazyLoadMessages(messages[0])
	}
}

templ Chatroom(messages []*MessageComponentViewModel) {
	<div class="flex flex-col h-full w-3/5 m-auto bg-base-100 shadow-2xl" hx-ext="ws" ws-connect="/chatroom/ws">
		<h1 class="text-center">Chat Room</h1>
		<div class="flex-1 overflow-hidden">
			<div class="h-full relative">
				<div id="chat_window" class="h-full w-full overflow-y-auto pb-4">
					<scroller id="chat_room" class="scroller flex flex-col">
						@MessageGroup(messages)
						//Injected content here
						<anchor id="chat_room_bottom" class="anchor"></anchor>
					</scroller>
				</div>
			</div>
		</div>
		<div class="w-full">
			@ChatInput()
		</div>
	</div>
	<script type="text/javascript">
		(() => {
			// Chat room anchors to the bottom of the page when the scroll bar is near the bottom.

			function inRange(x, min, max) {
				return ((x-min)*(x-max) <= 0);
			}

			function nearBottom(el, pct) {
				let sh = el.scrollHeight,
						st = el.scrollTop,
						ht = el.offsetHeight;
				const diff = sh - ht,
			        margin = diff * pct,
						  min = diff - margin,
						  max = diff + margin;
				return ht == 0 || st == diff || inRange(st, min, max);
			}

			function scrollToAnchor() {
				const anchor = document.getElementById("chat_room_bottom");
				anchor?.scrollIntoView();
			}
			scrollToAnchor()

			const handleWsMessage = () => {
				scrollToAnchor()
				document.body.removeEventListener("htmx:wsAfterMessage", handleWsMessage)
			}

			document.body.addEventListener("htmx:wsBeforeMessage", function(evt) {
				const el = document.getElementById("chat_window");
				const nb = nearBottom(el, 0.10)
				if(nb) {
					document.body.addEventListener("htmx:wsAfterMessage", handleWsMessage)
				}
			});
		})();
	</script>
}
